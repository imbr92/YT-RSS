#!/bin/sh

# Paths to set
path_to_feed=~/.config/yt-rss # Path to yt-rss config directory
default_download_dir=~/Videos/ # Default location where videos will be downloaded to

buf=''

while read -r id ts <&3; IFS='|' read -r url download_dir flags;  do

    rss_id=$(echo $url | awk -F'=' '{print $2}')
    (!([ -n "$ts" ] && [ "$ts" -eq "$ts" ] 2>/dev/null)  || [ $id != $rss_id ]) && ts=0

    url=$(echo $url | awk '{$1=$1};1')
    download_dir=$(echo $download_dir | awk '{$1=$1};1')
    download_dir=${download_dir:-$default_download_dir}
    flags=$(echo $flags | awk '{$1=$1};1')

    formatted_entries=$(curl -s "$url" | grep '.*link.*?v=.*\|updated' | awk -F'[<>"]' -v ORS="" '{ print ($2=="updated" ? $3 "\n" : $5 " ") }' | tac | head -n 2)
    updated_ts=$ts
    prev_ts=$ts

    while IFS=' ' read -r video_url timestamp; do
        [ -z "$video_url" ] && continue
        cur_ts=$(date -d $timestamp +%s)
        if [ $ts -lt $cur_ts ]; then
            yt-dlp -P $download_dir "$video_url" && [ $updated_ts -eq $prev_ts ] && updated_ts=$cur_ts
            prev_ts=$cur_ts
        fi
    done  < <(printf '%s\n' "$formatted_entries")
    
    if [ $prev_ts -ne $updated_ts ]; then
        echo $(date)$'\tFailed to update'${id}  >> log.txt
    fi

    printf -v buf '%s%s %s\n' "$buf" "$rss_id" "$updated_ts"

done < "${path_to_feed}/rsslist" 3< "${path_to_feed}/ts"

echo "$buf" > "${path_to_feed}/ts"
